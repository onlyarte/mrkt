type Query {
  title: String!
  categories: [Category!]!
}

type Mutation {
  signup(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createCategory(name: String!, description: String, parent: ID): Category!
  updateCategory(id: ID!, updates: CategoryInput!): Category
  deleteCategory(id: ID!): Category
  createItem(name: String!, description: String!, category: ID!, price: Float!): Item!
  updateItem(id: ID!, updates: ItemInput!): Item
  deleteItem(id: ID!): Item
  wish(item: ID!): Wish!
}

type Subscription {
  newCategory: Category
}

type Category {
  id: ID!
  createdAt: String!
  name: String!
  description: String
  parent: Category
  items(filter: ItemFilterInput, orderBy: ItemOrderByInput, skip: Int, first: Int): Items!
}

input CategoryInput {
  name: String
  description: String
  parent: ID
}

type Item {
  id: ID!
  createdAt: String!
  name: String!
  description: String!
  category: Category!
  price: Float!
}

input ItemInput {
  name: String
  description: String
  category: ID
  price: Float
}

type Items {
  items: [Item!]!
  count: Int!
}

input ItemFilterInput {
  name_contains: String
  description_contains: String
  price: Float
}

enum ItemOrderByInput {
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_Desc
}

type Wish {
  id: ID!
  createdAt: String!
  item: Item!
  user: User!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  wishes: [Wish!]!
}

type AuthPayload {
  token: String
  user: User
}
